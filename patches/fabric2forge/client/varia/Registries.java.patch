--- a/client/varia/Registries.java
+++ b/client/varia/Registries.java
@@ -1,27 +1,27 @@
-package com.unascribed.blockrenderer.fabric.client.varia;
+package com.unascribed.blockrenderer.forge.client.varia;
 
 import net.minecraft.item.Item;
-import net.minecraft.util.LazyValue;
 import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.registry.Registry;
+import net.minecraftforge.fml.RegistryObject;
+import net.minecraftforge.registries.ForgeRegistries;
+import net.minecraftforge.registries.IForgeRegistryEntry;
 
 import java.util.function.Function;
 import java.util.function.Supplier;
 
 public interface Registries {
 
-    LazyValue<Item> CUTTER = new LazyValue<>(() -> lookupItem(new ResourceLocation("minecraft:stonecutter")));
-    LazyValue<Item> DISPENSER = new LazyValue<>(() -> lookupItem(new ResourceLocation("minecraft:dispenser")));
-    LazyValue<Item> EMPTY_MAP = new LazyValue<>(() -> lookupItem(new ResourceLocation("minecraft:map")));
-    LazyValue<Item> MAP = new LazyValue<>(() -> lookupItem(new ResourceLocation("minecraft:filled_map")));
-    LazyValue<Item> PATTERN = new LazyValue<>(() -> lookupItem(new ResourceLocation("minecraft:mojang_banner_pattern")));
+    RegistryObject<Item> CUTTER = RegistryObject.of(new ResourceLocation("minecraft:stonecutter"), ForgeRegistries.ITEMS);
+    RegistryObject<Item> DISPENSER = RegistryObject.of(new ResourceLocation("minecraft:dispenser"), ForgeRegistries.ITEMS);
+    RegistryObject<Item> EMPTY_MAP = RegistryObject.of(new ResourceLocation("minecraft:map"), ForgeRegistries.ITEMS);
+    RegistryObject<Item> MAP = RegistryObject.of(new ResourceLocation("minecraft:filled_map"), ForgeRegistries.ITEMS);
+    RegistryObject<Item> PATTERN = RegistryObject.of(new ResourceLocation("minecraft:mojang_banner_pattern"), ForgeRegistries.ITEMS);
 
-    static Item lookupItem(ResourceLocation identifier) {
-        return Registry.ITEM.getOrDefault(identifier);
+    static void clazzLoad() {
+        // INTENTIONAL LEFT BLANK
     }
 
-    static <A, B> Supplier<B> mapLazy(LazyValue<A> lazy, Function<A, B> mapper) {
-        return () -> mapper.apply(lazy.getValue());
+    static <A extends IForgeRegistryEntry<? super A>, B> Supplier<B> mapLazy(RegistryObject<A> lazy, Function<A, B> mapper) {
+        return lazy.lazyMap(mapper);
     }
-
 }
