--- a/client/varia/Registries.java
+++ b/client/varia/Registries.java
@@ -1,25 +1,17 @@
-package com.unascribed.blockrenderer.fabric.client.varia;
+package com.unascribed.blockrenderer.forge.client.varia;
 
-import net.minecraft.core.Registry;
-import net.minecraft.resources.ResourceLocation;
-import net.minecraft.util.LazyLoadedValue;
-import net.minecraft.world.item.Item;
+import net.minecraft.item.Item;
+import net.minecraft.util.ResourceLocation;
+import net.minecraftforge.fml.RegistryObject;
+import net.minecraftforge.registries.ForgeRegistries;
 
-import java.util.function.Function;
-import java.util.function.Supplier;
-
 public interface Registries {
 
-    LazyLoadedValue<Item> MAP = new LazyLoadedValue<>(() -> lookupItem(new ResourceLocation("minecraft:filled_map")));
-    LazyLoadedValue<Item> DISPENSER = new LazyLoadedValue<>(() -> lookupItem(new ResourceLocation("minecraft:dispenser")));
-    LazyLoadedValue<Item> CUTTER = new LazyLoadedValue<>(() -> lookupItem(new ResourceLocation("minecraft:stonecutter")));
+    RegistryObject<Item> MAP = RegistryObject.of(new ResourceLocation("minecraft:filled_map"), ForgeRegistries.ITEMS);
+    RegistryObject<Item> DISPENSER = RegistryObject.of(new ResourceLocation("minecraft:dispenser"), ForgeRegistries.ITEMS);
+    RegistryObject<Item> CUTTER = RegistryObject.of(new ResourceLocation("minecraft:stonecutter"), ForgeRegistries.ITEMS);
 
-    static Item lookupItem(ResourceLocation identifier) {
-        return Registry.ITEM.get(identifier);
+    static void clazzLoad() {
+        // INTENTIONAL LEFT BLANK
     }
-
-    static <A, B> Supplier<B> mapLazy(LazyLoadedValue<A> lazy, Function<A, B> mapper) {
-        return () -> mapper.apply(lazy.get());
     }
-
-}
