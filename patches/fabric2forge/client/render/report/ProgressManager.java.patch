--- a/client/render/report/ProgressManager.java
+++ b/client/render/report/ProgressManager.java
@@ -1,15 +1,14 @@
-package com.unascribed.blockrenderer.fabric.client.render.report;
+package com.unascribed.blockrenderer.forge.client.render.report;
 
-
-import com.mojang.blaze3d.vertex.PoseStack;
-import com.unascribed.blockrenderer.fabric.client.varia.rendering.Display;
-import com.unascribed.blockrenderer.fabric.client.varia.rendering.GL;
+import com.mojang.blaze3d.matrix.MatrixStack;
+import com.unascribed.blockrenderer.forge.client.varia.rendering.Display;
+import com.unascribed.blockrenderer.forge.client.varia.rendering.GL;
 import com.unascribed.blockrenderer.render.report.BaseProgressManager;
 import com.unascribed.blockrenderer.varia.Maths;
 import com.unascribed.blockrenderer.varia.Time;
 import com.unascribed.blockrenderer.varia.debug.Debug;
-import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.TextComponent;
+import net.minecraft.util.text.ITextComponent;
+import net.minecraft.util.text.StringTextComponent;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -19,22 +18,22 @@
     private static final int LIGHT_GREEN = 0xFF55FF55;
 
     @NotNull
-    public static Component title = new TextComponent("Rendering");
+    public static ITextComponent title = new StringTextComponent("Rendering");
     @Nullable
-    public static Component message = null;
+    public static ITextComponent message = null;
 
     private static final BaseProgressManager MANAGER = new BaseProgressManager();
 
     private static long lastRender = System.nanoTime();
 
-    public static void init(Component title, int steps) {
+    public static void init(ITextComponent title, int steps) {
         reset();
         MANAGER.init(steps);
 
         ProgressManager.title = title;
     }
 
-    public static void push(@Nullable Component message) {
+    public static void push(@Nullable ITextComponent message) {
         ProgressManager.message = message;
         MANAGER.push();
     }
@@ -50,12 +49,12 @@
     }
 
     private static void reset() {
-        title = new TextComponent("Rendering");
+        title = new StringTextComponent("Rendering");
         message = null;
     }
 
-    public static Component getProgress() {
-        return new TextComponent(MANAGER.getProgress());
+    public static ITextComponent getProgress() {
+        return new StringTextComponent(MANAGER.getProgress());
     }
 
     public static void render() {
@@ -77,7 +76,7 @@
         Display.drawDirtBackground(displayWidth, displayHeight);
 
         // ...and the title
-        Display.drawCenteredString(new PoseStack(), ProgressManager.title, displayWidth / 2, displayHeight / 2 - 24, -1);
+        Display.drawCenteredString(new MatrixStack(), ProgressManager.title, displayWidth / 2, displayHeight / 2 - 24, -1);
 
         // ...and the progress bar
         renderProgressBar(displayWidth, displayHeight);
@@ -88,7 +87,7 @@
             GL.scale(0.5f, 0.5f, 1);
 
             // ...and the subtitle
-            Display.drawCenteredString(new PoseStack(), message, displayWidth, displayHeight - 20, -1);
+            Display.drawCenteredString(new MatrixStack(), message, displayWidth, displayHeight - 20, -1);
 
             GL.popMatrix("progress/message");
         }
@@ -107,8 +106,8 @@
         int hw = displayWidth / 2;
         int hh = displayHeight / 2;
 
-        Display.drawRect(new PoseStack(), hw - 50, hh - 1, hw + 50, hh + 1, DARK_GREEN);
-        Display.drawRect(new PoseStack(), hw - 50, hh - 1, hw - 50 + progress, hh + 1, LIGHT_GREEN);
+        Display.drawRect(new MatrixStack(), hw - 50, hh - 1, hw + 50, hh + 1, DARK_GREEN);
+        Display.drawRect(new MatrixStack(), hw - 50, hh - 1, hw - 50 + progress, hh + 1, LIGHT_GREEN);
     }
 
 }
