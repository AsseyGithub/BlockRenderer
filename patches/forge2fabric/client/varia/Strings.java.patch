--- a/client/varia/Strings.java
+++ b/client/varia/Strings.java
@@ -1,15 +1,11 @@
-package com.unascribed.blockrenderer.forge.client.varia;
+package com.unascribed.blockrenderer.fabric.client.varia;
 
 import com.google.common.collect.Sets;
 import net.minecraft.client.Minecraft;
-import net.minecraft.item.ItemStack;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.text.ITextComponent;
-import net.minecraft.util.text.StringTextComponent;
-import net.minecraft.util.text.TranslationTextComponent;
-import net.minecraft.util.text.event.ClickEvent;
-import net.minecraft.util.text.event.HoverEvent;
-import net.minecraftforge.registries.ForgeRegistries;
+import net.minecraft.core.Registry;
+import net.minecraft.network.chat.*;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.item.ItemStack;
 import org.jetbrains.annotations.Nullable;
 
 import java.io.File;
@@ -25,9 +21,7 @@
     static String getNamespace(@Nullable ItemStack stack) {
         if (stack == null) return "";
 
-        ResourceLocation identifier = ForgeRegistries.ITEMS.getKey(stack.getItem());
-
-        return identifier == null ? "" : identifier.getNamespace();
+        return Registry.ITEM.getKey(stack.getItem()).getNamespace();
     }
 
     static Set<String> getNamespaces(String namespaceSpec) {
@@ -38,16 +32,16 @@
         return namespaces;
     }
 
-    static void addMessage(ITextComponent text) {
-        Minecraft.getInstance().gui.getChat().addMessage(text);
+    static void addMessage(Component component) {
+        Minecraft.getInstance().gui.getChat().addMessage(component);
     }
 
     static String dateTime() {
         return DATETIME_FORMAT.format(new Date());
     }
 
-    static String sanitize(ITextComponent text) {
-        return sanitize(text.getString());
+    static String sanitize(Component component) {
+        return sanitize(component.getString());
     }
 
     static String sanitize(ResourceLocation identifier) {
@@ -58,8 +52,8 @@
         return str.trim().replaceAll("[^A-Za-z0-9-_ ]", "_");
     }
 
-    static ITextComponent asClickable(File file) {
-        StringTextComponent component = rawText(file.getName());
+    static Component asClickable(File file) {
+        TextComponent component = rawText(file.getName());
 
         String path;
 
@@ -77,18 +71,18 @@
                 component.getStyle()
                         .withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, translate("block_renderer.file.tooltip")))
                         .withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_FILE, path))
-                        .setUnderlined(true)
+                        .withUnderlined(true)
         );
 
         return component;
     }
 
-    static TranslationTextComponent translate(String name, Object... args) {
-        return new TranslationTextComponent(name, args);
+    static TranslatableComponent translate(String name, Object... args) {
+        return new TranslatableComponent(name, args);
     }
 
-    static StringTextComponent rawText(String text) {
-        return new StringTextComponent(text);
+    static TextComponent rawText(String text) {
+        return new TextComponent(text);
     }
 
 }
